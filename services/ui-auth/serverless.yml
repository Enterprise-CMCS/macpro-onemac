# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: ui-auth

frameworkVersion: "3"

useDotenv: true

plugins:
  - serverless-s3-bucket-helper

custom:
  stage: ${opt:stage, self:provider.stage}
  attachments_bucket_arn: ${cf:uploads-${self:custom.stage}.AttachmentsBucketArn}
  application_endpoint_url: ${cf:ui-${self:custom.stage}.ApplicationEndpointUrl}
  okta_metadata_url: ${env:OKTA_METADATA_URL, ""}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: dev

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.iamPermissionsBoundaryPolicy, ""}
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.stage}-user-pool
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true # Disable signup by the user
        UsernameAttributes:
          - email
        Schema:
          - Name: given_name
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: family_name
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: phone_number
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: cms_roles
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: ismemberof
            AttributeDataType: String
            Mutable: true
            Required: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.stage}-user-pool-client
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - ${self:custom.application_endpoint_url}
          - ${self:custom.application_endpoint_url}/dashboard
          - http://localhost:3000/
          - http://localhost:3000/dashboard
        DefaultRedirectURI: ${self:custom.application_endpoint_url}
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
        LogoutURLs:
          - ${self:custom.application_endpoint_url}
          - http://localhost:3000/
        SupportedIdentityProviders:
          - Okta
        UserPoolId:
          Ref: CognitoUserPool
      DependsOn: CognitoUserPoolIdentityProvider

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain:
          Fn::Join:
            - ""
            - - ${self:custom.stage}-login-
              - Ref: CognitoUserPoolClient
        UserPoolId:
          Ref: CognitoUserPool

    CognitoUserPoolIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        AttributeMapping:
          email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
          family_name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname
          given_name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
          custom:cms_roles: cmsRoles
          custom:ismemberof: ismemberof
        IdpIdentifiers:
          - IdpIdentifier
        ProviderDetails:
          MetadataURL: ${self:custom.okta_metadata_url}
        ProviderName: Okta
        ProviderType: SAML
        UserPoolId:
          Ref: CognitoUserPool

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.stage}IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: ["CognitoUserPool", "ProviderName"]
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]

    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - Fn::Join:
                - ""
                - - "arn:aws:iam::"
                  - Ref: AWS::AccountId
                  - ":policy"
                  - '${self:custom.iamPermissionsBoundaryPolicy, ""}'
            - Ref: AWS::NoValue
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"

                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:execute-api:"
                        - Ref: AWS::Region
                        - ":"
                        - Ref: AWS::AccountId
                        - ":*/*"

                - Effect: "Allow"
                  Action:
                    # These are all required for amplify to do a PUT
                    - "s3:PutObject"
                    - "s3:DeleteObject"
                  Resource:
                    - Fn::Join:
                        - ""
                        - - ${self:custom.attachments_bucket_arn}
                          - "/protected/"
                          - "$"
                          - "{cognito-identity.amazonaws.com:sub}/*"
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
    UserPoolClientDomain:
      Value:
        Fn::Join:
          - ""
          - - Ref: UserPoolDomain
            - .auth.
            - Ref: AWS::Region
            - .amazoncognito.com
    IdentityPoolId:
      Value:
        Ref: CognitoIdentityPool
    Region:
      Value:
        Ref: AWS::Region
