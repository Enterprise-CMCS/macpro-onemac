Resources:
  LambdaApiRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: ${self:custom.iamPath}
      PermissionsBoundary:
        Fn::If:
          - CreatePermissionsBoundary
          - Fn::Join:
              - ""
              - - "arn:aws:iam::"
                - Ref: AWS::AccountId
                - ":policy"
                - '${self:custom.iamPermissionsBoundaryPolicy, ""}'
          - Ref: AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: "LambdaApiRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:ListBucket
                Resource: !Sub ${self:custom.attachmentsBucketArn}/*
              - Effect: "Allow"
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Resource:
                  - Fn::Join:
                      - "/"
                      - - Fn::Join:
                            [
                              ":",
                              [
                                "arn:aws:execute-api",
                                { "Ref": "AWS::Region" },
                                { "Ref": "AWS::AccountId" },
                                { "Ref": "ApiGatewayRestApi" },
                              ],
                            ]
              - Effect: "Allow"
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                Resource: arn:aws:dynamodb:*:*:table/${self:custom.oneMacTableName}
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - arn:aws:dynamodb:*:*:table/${self:custom.oneMacTableName}/index/*
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"

  LambdaWarmupRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: ${self:custom.iamPath}
      PermissionsBoundary:
        Fn::If:
          - CreatePermissionsBoundary
          - Fn::Join:
              - ""
              - - "arn:aws:iam::"
                - Ref: AWS::AccountId
                - ":policy"
                - '${self:custom.iamPermissionsBoundaryPolicy, ""}'
          - Ref: AWS::NoValue
      Policies:
        - PolicyName: "Warmup"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
